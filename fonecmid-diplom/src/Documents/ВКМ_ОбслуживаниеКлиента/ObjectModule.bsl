
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий
	
Процедура ОбработкаПроведения(Отказ, Режим) 
		
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ВидДоговора, ВКМ_ДатаНачалаДействия, ВКМ_ДатаОкончанияДействия, ВКМ_СтоимостьЧасаРаботы");
	ВидДоговора = РеквизитыДоговора.ВидДоговора;
	ДатаНачала = РеквизитыДоговора.ВКМ_ДатаНачалаДействия;
	ДатаОкончания = РеквизитыДоговора.ВКМ_ДатаОкончанияДействия;
	СтавкаЧаса = РеквизитыДоговора.ВКМ_СтоимостьЧасаРаботы;
	ДанныеСотрудника = ВКМ_ДанныеСотрудниковВызовСервера.ДанныеСотрудника(Специалист, Дата);
	КатегорияСотрудника = ДанныеСотрудника.Категория;
	ПроцентОтПродаж = ДанныеСотрудника.ПроцентОтРабот;
	
	Если КатегорияСотрудника <> Перечисления.ВКМ_КатегорииСотрудников.Специалист Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Выбран сотрудник не из категории Специалист.", ЭтотОбъект, "Специалист");
		Возврат;	
	КонецЕсли;
	
	Если ПроцентОтПродаж = "" Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Для специалиста %1 на дату документа не установлен процент оплаты от работ.", Специалист), ЭтотОбъект, "Специалист");
		Возврат;
	КонецЕсли;
	
	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание  Тогда 
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Выбран неверный договор. Договор должен быть с типом Абонентское обслуживание", ЭтотОбъект, "Договор");
		Возврат;
	КонецЕсли;	
	
	Если Дата < ДатаНачала ИЛИ Дата > ДатаОкончания Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("На дату документа договор не действителен. Проверьте срок действия договора", ЭтотОбъект, "Договор");
		Возврат;
	КонецЕсли;
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина; 
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	Движения.ВКМ_АктыПоВыполненнымРаботам.Записывать= Истина;
	
	ВсегоЧасовКОплате = 0;
	СуммаВсего = 0;
	
	Для Каждого Строка Из ВыполненныеРаботы Цикл
		
		// регистр ВКМ_ВыполненныеКлиентуРаботы		
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = Строка.ЧасыКОплатеКлиенту;
		Движение.СуммаКОплате = Строка.ЧасыКОплатеКлиенту * СтавкаЧаса;
		
		ВсегоЧасовКОплате = ВсегоЧасовКОплате + Строка.ЧасыКОплатеКлиенту;
		СуммаВсего = СуммаВсего + Движение.СуммаКОплате;
		
	КонецЦикла;
	
	Если ВыполненныеРаботы.Количество() <> 0 Тогда
		
		// регистр ВКМ_ВыполненныеСотрудникомРаботы
		Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Сотрудник = Специалист;
		Движение.ЧасовКОплате = ВсегоЧасовКОплате;
		Движение.СуммаКОплате = ВсегоЧасовКОплате * СтавкаЧаса * Число(СокрЛП(ПроцентОтПродаж)) / 100;
		
		// регистр ВКМ_АктыПоВыполненнымРаботам Приход
		Движение = Движения.ВКМ_АктыПоВыполненнымРаботам.ДобавитьПриход();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.Сумма = СуммаВсего;
		
	КонецЕсли; 
		
КонецПроцедуры 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
     Возврат;
    КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		НоваяЗаявка = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		НоваяЗаявка.ТекстСообщения = СтрШаблон("Новая заявка для специалиста %1, на дату %2, с %3 до %4", Специалист, Формат(ДатаПроведенияРабот, "ДЛФ=D"), Формат(ВремяНачалаРабот, "ДЛФ=T"), Формат(ВремяОкончанияРабот, "ДЛФ=T")); 
		НоваяЗаявка.Записать();
		
	Иначе
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Специалист, ДатаПроведенияРабот, ВремяНачалаРабот, ВремяОкончанияРабот"); 	
		
		СпециалистБД = РеквизитыДокумента.Специалист;
		ДатаРабот = РеквизитыДокумента.ДатаПроведенияРабот;
		ВремяНачала = РеквизитыДокумента.ВремяНачалаРабот;
		ВремяОкончания = РеквизитыДокумента.ВремяОкончанияРабот;
		
		Если Специалист <> СпециалистБД ИЛИ ДатаПроведенияРабот <> ДатаРабот ИЛИ ВремяНачалаРабот <> ВремяНачала ИЛИ ВремяОкончанияРабот <> ВремяОкончания Тогда
			
			ТекстСообщения = СтрШаблон("По заявке № %1 изменились данные:", Формат(Число(Номер)));
			
			Если Специалист <> СпециалистБД Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон("Специалист: %1", Специалист);
			КонецЕсли;
			
			Если ДатаПроведенияРабот <>ДатаРабот Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон("Дата проведения работ: %1", Формат(ДатаПроведенияРабот, "ДЛФ=D"));
			КонецЕсли;
			
			Если ВремяНачалаРабот <> ВремяНачала Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон("Время начала работ: %1", Формат(ВремяНачалаРабот, "ДЛФ=T"));
			КонецЕсли; 
			
			Если ВремяОкончанияРабот <> ВремяОкончания Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС + СтрШаблон("Время окончания работ: %1", Формат(ВремяОкончанияРабот, "ДЛФ=T"));
			КонецЕсли;
			
			НоваяЗаявка = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НоваяЗаявка.ТекстСообщения = ТекстСообщения; 
			НоваяЗаявка.Записать(); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти 
	
#КонецЕсли
